import toposort
import random

import networkx as nx

def getnodes(edges,num_nodes):
    adj=[]
    zeroedges=[]
    for i in edges:
        zeroedges.append(list(i))
    for i in range(0,len(zeroedges)):
        for j in range(0,len(zeroedges[i])):
            zeroedges[i][j]=zeroedges[i][j]-1

    for i in range(num_nodes):
        adj.append([])
    for i in edges:
        adj[i[0]-1].append(i[1]-1)
    return adj


def test1_topsort():
    edges = [[1, 2], [4, 1], [3, 1]]
    num_nodes=4
    adj=getnodes(edges,num_nodes)
    order=toposort.toposort(adj)

    order_one=[]
    for i in order:        
        order_one.append(i+1)
    assert order_one==[4,3,1,2], 'test1_topsort failed'
   
def test2_topsort():
    edges = [[3, 1]]
    num_nodes=4
    adj=getnodes(edges,num_nodes)
    order=toposort.toposort(adj)

    order_one=[]
    for i in order:        
        order_one.append(i+1)
    assert order_one==[4,3,1,2], 'test2_topsort failed'


def test3_topsort():
    edges = [
        [87972,84473],
        [46314,35804],
        [8999,7145],
        [32783,80172],
        [55432,40802],
        [254,59291],
        [37105,63872],
        [89070,8342],
        [51673,94368],
        [50698,43013],
        [83092,15182],
        [36605,62768],
        [26478,6050],
        [82475,61034],
        [27632,4911],
        [37993,8842],
        [60186,69421],
        [34029,78972],
        [33538,19136],
        [54822,2562],
        [6298,73800],
        [89918,71606],
        [35670,71535],
        [56509,30933],
        [93642,82741],
        [66389,91157],
        [84984,37542],
        [71764,85744],
        [7267,34442],
        [28173,8648],
        [90593,55156],
        [70744,99126],
        [36016,22372],
        [82238,2596],
        [38172,4239],
        [32753,8599],
        [79720,77653],
        [29299,15260],
        [84549,79843],
        [35763,50192],
        [24232,76668],
        [78932,31005],
        [56042,90665],
        [89703,47077],
        [57771,37032],
        [27540,7550],
        [71463,75027],
        [69221,74138],
        [2800,34122],
        [5942,68287],
        [90485,79543],
        [95232,45514],
        [59939,50989],
        [67224,90049],
        [99315,58245],
        [20787,82287],
        [2368,86143],
        [88248,20153],
        [29341,49794],
        [38440,73236],
        [31547,41604],
        [92080,45343],
        [43335,22863],
        [45863,39799],
        [73106,90267],
        [77313,10473],
        [2830,68646],
        [2513,37448],
        [30731,19326],
        [50500,66702],
        [71876,72348],
        [81711,22276],
        [38093,95759],
        [48384,87617],
        [86531,41716],
        [12876,93130],
        [36739,27789],
        [75644,35460],
        [77763,96322],
        [85755,51294],
        [91742,91714],
        [95121,53388],
        [11799,11670],
        [44985,97368],
        [38101,8105],
        [4823,21660],
        [77290,57414],
        [94874,98773],
        [62045,95350],
        [86381,86630],
        [18534,9158],
        [34272,80153],
        [85473,71960],
        [85557,82985],
        [27515,34796],
        [80836,98987],
        [18818,54179],
        [80046,53047],
        [76526,45125],
        [85956,9297],
        [5321,62668],
        [85372,61705],
        [41734,81353],
        [92258,14854],
        [19620,17125],
        [81366,10506],
        [81873,64459],
        [85235,51793],
        [17495,20204],
        [9819,70164],
        [59843,92705],
        [45270,90158],
        [90445,12543],
        [77217,19005],
        [11427,53165],
        [59861,48399],
        [49372,87855],
        [37897,87845],
        [87737,36929],
        [60887,84231],
        [58925,96191],
        [83423,79885],
        [51181,76030],
        [14262,93414],
        [4986,58002],
        [60685,37707],
        [13878,6283],
        [77396,15156],
        [72569,30008],
        [70141,32901],
        [69834,6555],
        [7967,46398],
        [87790,36940],
        [58886,76988],
        [73260,21231],
        [94601,53486],
        [56339,75463],
        [54919,6496],
        [77195,14119],
        [39894,48148],
        [15422,17380],
        [94515,57849],
        [5197,81984],
        [75119,49894],
        [64517,76833],
        [99581,67142],
        [49934,21139],
        [577,81853],
        [37018,47875],
        [70409,2706],
        [34775,24884],
        [28786,82836],
        [24595,36048],
        [18042,53503],
        [73200,9472],
        [25254,57561],
        [92000,15861],
        [92305,2911],
        [43840,71346],
        [93514,78047],
        [50472,79259],
        [95859,45880],
        [16187,52501],
        [7925,78952],
        [91159,1632],
        [8754,82217],
        [76599,45333],
        [88010,1759],
        [45971,90339],
        [21694,72090],
        [80703,69521],
        [16664,85085],
        [44575,42869],
        [96945,17630],
        [20689,22024],
        [45378,44913],
        [80775,87302],
        [30369,51635],
        [33038,34841],
        [43874,30929],
        [61528,41728],
        [84385,98123],
        [41315,38469],
        [24427,47552],
        [63416,17953],
        [50961,14539],
        [50415,59103],
        [21211,14377],
        [94447,62013],
        [57286,56452],
        [98621,51477],
        [79977,85982],
        [35493,29957],
        [66674,8320],
        [92318,32893],
        [92788,53753],
        [27641,36866],
        [1564,77702],
        [29265,80753],
        [2992,33755],
        [36537,5268],
        [24063,60371],
        [54936,38581],
        [47516,62143],
        [4233,83645],
        [3279,25997],
        [15153,47381],
        [7112,22338],
        [45909,95178],
        [98180,40886],
        [14155,99957],
        [9055,88047],
        [45554,71043],
        [38551,76958],
        [80085,58637],
        [1594,10854],
        [9965,2066],
        [83789,62704],
        [2708,517],
        [48408,17785],
        [23845,44993],
        [74394,80968],
        [48064,56821],
        [28575,40007],
        [29239,81866],
        [94651,99990],
        [78020,11193],
        [98667,88868],
        [60230,69931],
        [82480,43122],
        [12999,15356],
        [1710,18734],
        [801,54386],
        [85200,16467],
        [97557,17094],
        [44531,50542],
        [51379,40552],
        [86423,52840],
        [19488,79557],
        [57386,68415],
        [49485,66764],
        [55700,59113],
        [18101,47691],
        [401,44064],
        [49173,58541],
        [71614,70927],
        [9047,31539],
        [32548,74450],
        [30081,68747],
        [65022,35271],
        [68512,12025],
        [9907,10705],
        [82217,54389],
        [1565,17979],
        [99430,81283],
        [23053,99680],
        [93476,94933],
        [35079,47519],
        [99194,12517],
        [67012,25709],
        [1848,82023],
        [39158,51463],
        [98130,68260],
        [80644,52319],
        [10949,7820],
        [47436,23236],
        [81917,40514],
        [8258,66145],
        [80644,62118],
        [87200,6465],
        [24215,47104],
        [21820,38803],
        [60724,79083],
        [94769,74331],
        [9761,22557],
        [37341,20363],
        [88913,33805],
        [17675,57624],
        [77171,44593],
        [22657,56646],
        [48353,64413],
        [14326,2228],
        [34945,84271],
        [91697,27322],
        [43372,36919],
        [37579,68422],
        [9386,94710],
        [63056,10063],
        [2221,12375],
        [62560,6449],
        [50689,54734],
        [9565,28630],
        [24516,17015],
        [28263,53209],
        [62511,84249],
        [84536,90341],
        [5411,26959],
        [48029,93871],
        [92015,18340],
        [63549,37114],
        [25270,67812],
        [73105,57799],
        [41075,9504],
        [18542,10361],
        [82434,9087],
        [80627,56421],
        [27206,92723],
        [27285,62279],
        [99915,29565],
        [91985,16596],
        [64243,7882],
        [19336,44372],
        [35293,18915],
        [19145,21392],
        [34561,18966],
        [71234,78895],
        [92610,90957],
        [7834,87801],
        [98164,4003],
        [10674,20150],
        [41586,8114],
        [65505,88691],
        [8950,81674],
        [1850,96324],
        [82956,53118],
        [91112,85089],
        [46614,15425],
        [70547,9698],
        [61908,82242],
        [94560,59365],
        [87007,14663],
        [61035,88504],
        [10424,45235],
        [92749,60914],
        [58739,78684],
        [33622,3855],
        [17705,73973],
        [47276,81717],
        [94161,17962],
        [17269,32695],
        [53253,68990],
        [11124,7904],
        [30083,1518],
        [28660,81272],
        [31973,26865],
        [36768,26061],
        [92170,30655],
        [39083,73249],
        [72402,32176],
        [65038,66193],
        [75593,77537],
        [24631,1234],
        [12987,14809],
        [78452,77082],
        [18307,3273],
        [56719,36675],
        [99876,39385],
        [21822,39898],
        [38437,4053],
        [3557,54020],
        [54540,38020],
        [74610,89296],
        [62525,37864],
        [12311,44970],
        [86395,21989],
        [56402,44323],
        [1403,16734],
        [65034,76223],
        [54179,29154],
        [66650,96083],
        [45624,75008],
        [23974,63875],
        [72833,70427],
        [96458,67553],
        [14391,85875],
        [18962,54064],
        [93821,34085],
        [9994,84473],
        [2867,46753],
        [39429,11604],
        [5975,62840],
        [87505,4686],
        [10111,53732],
        [59463,30389],
        [70199,39859],
        [65727,75813],
        [52004,65300],
        [7669,16568],
        [79130,29947],
        [31291,25474],
        [84427,65002],
        [37835,73167],
        [30117,57637],
        [10343,45380],
        [34023,46377],
        [80499,82360],
        [60803,45820],
        [23093,16662],
        [90384,24481],
        [60326,52836],
        [70099,1132]
    ]

    num_nodes=100000
    adj=getnodes(edges,num_nodes)
    order=toposort.toposort(adj)

    order_one=[]
    for i in order:        
        order_one.append(i+1)
    assert order_one==[1,2,3], 'test3_topsort failed'

def testrandom_topsort(test=1000, maxnum_vertices=1000, maxnum_edges=1000):

    ntest=0
    while ntest<test:
        
        num_vertices=random.randint(1,maxnum_vertices)
        num_edges=random.randint(1,maxnum_edges)
        graph=[]
        for j in range(0,num_edges):
            graph.append([random.randint(0,num_vertices-1),random.randint(0,num_vertices-1)])


        G=nx.DiGraph()
        G.add_edges_from(graph)
        acyclic=nx.is_directed_acyclic_graph(G)

        if acyclic==True: #it is dag!
            ntest+=1
            print("start test %d/%d"%(ntest,test))

            order=toposort.toposort(getnodes(graph,num_vertices))
            order_one=[]
            for i in order:        
                order_one.append(i+1)
            
            
            print("test%d/%d %r"%(ntest,test,order_one))
            
def test4_topsort():
    edges = [[2, 1], [3,2], [3,1], [4,3], [4,1], [5,2], [5,3]]
    num_nodes=5
    adj=getnodes(edges,num_nodes)
    order=toposort.toposort(adj)

    order_one=[]
    for i in order:        
        order_one.append(i+1)
    assert order_one==[5,4,3,2,1], 'test4_topsort failed'            

        
    
if __name__=="__main__":
    #test1_topsort()
    #test2_topsort()
    test3_topsort()
    #test4_topsort()

    #testrandom_topsort(test=10000, maxnum_vertices=100, maxnum_edges=100)
    #testrandom_topsort(test=1000, maxnum_vertices=1000, maxnum_edges=100)
    #testrandom_topsort(test=1, maxnum_vertices=100000, maxnum_edges=100000)